console.log('–ë–û–¢ –ó–ê–ü–£–°–¢–ò–õ–°–Ø –°–ê–°–ê–¢–¨');
const { VK } = require('vk-io'); 
const vk = new VK();
const commands = [];
const {Keyboard} = require("vk-io");
const request = require('prequest');
let user = new VK();
user.setOptions({
	token: '10684db7676619708875117287267800d931893d8c45dfad5c678e8c40fb0ec6103e5569771be674b1ae0' // —Ç–æ–∫–µ–Ω ot —Å—Ç—Ä–∞–Ω–∏—Ü—ã 
});
let giving = false;
const idolog = [



	{
		name: '–ù–∞—Ü–∏–∑–º',
		cost: 0,
		id: 1
    },
	{
		name: '–ö–æ–º–º—É–Ω–∏–∑–º',
		cost: 0,
		id: 2
    },

	{
		name: '–î–µ–º–æ–∫—Ä–∞—Ç–∏—è',
		cost: 0,
		id: 3
    },

	{
		name: '–ò–º–ø–µ—Ä–∏–∞–ª–∏–∑–º',
		cost: 0,
		id: 4
    },
];


const utils = {
	sp: (int) => {
		int = int.toString();
		return int.split('').reverse().join('').match(/[0-9]{1,3}/g).join('.').split('').reverse().join('');
	},
	rn: (int, fixed) => {
		if (int === null) return null;
		if (int === 0) return '0';
		fixed = (!fixed || fixed < 0) ? 0 : fixed;
		let b = (int).toPrecision(2).split('e'),
			k = b.length === 1 ? 0 : Math.floor(Math.min(b[1].slice(1), 14) / 3),
			c = k < 1 ? int.toFixed(0 + fixed) : (int / Math.pow(10, k * 3) ).toFixed(1 + fixed),
			d = c < 0 ? c : Math.abs(c),
			e = d + ['', '—Ç—ã—Å', '–º–ª–Ω', '–º–ª—Ä–¥', '—Ç—Ä–ª–Ω'][k];

			e = e.replace(/e/g, '');
			e = e.replace(/\+/g, '');
			e = e.replace(/Infinity/g, '–î–æ—Ö–µ—Ä–∞!');

		return e;
	},
	gi: (int) => {
		int = int.toString();

		let text = ``;
		for (let i = 0; i < int.length; i++)
		{
			text += `${int[i]}&#8419;`;
		}

		return text;
	},
	decl: (n, titles) => { return titles[(n % 10 === 1 && n % 100 !== 11) ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2] },
	random: (x, y) => {
		return y ? Math.round(Math.random() * (y - x)) + x : Math.round(Math.random() * x);
	},
	pick: (array) => {
		return array[utils.random(array.length - 1)];
	}
}


const rotateText = {
	q: 'q',
	w: ' ç',
	e: '«ù',
	r: '…π',
	t: ' á',
	y: ' é',
	u: 'u',
	i: '·¥â',
	o: 'o',
	p: 'p',
	a: '…ê',
	s: 's',
	d: 'd',
	f: '…ü',
	g: '∆É',
	h: '…•',
	j: '…æ',
	k: ' û',
	l: 'l',
	z: 'z',
	x: 'x',
	c: '…î',
	v: ' å',
	b: 'b',
	n: 'n',
	m: '…Ø',

	–π: '≈Ü',
	—Ü: '«π',
	—É: ' é',
	–∫: ' û',
	–µ: '«ù',
	–Ω: '–Ω',
	–≥: '…π',
	—à: 'm',
	—â: 'm',
	–∑: 'Œµ',
	—Ö: '—Ö',
	—ä: 'q',
	—Ñ: '—Ñ',
	—ã: 'ƒ±q',
	–≤: ' ö',
	–∞: '…ê',
	–ø: 'u',
	—Ä: 'd',
	–æ: '–æ',
	–ª: 'v',
	–¥: '…ì',
	–∂: '–∂',
	—ç: '—î',
	—è: ' Å',
	—á: '“ª',
	—Å: '…î',
	–º: 'w',
	–∏: '–∏',
	—Ç: '…Ø',
	—å: 'q',
	–±: '∆ç',
	—é: 'oƒ±'
}

let btc = 6000;

const users = require('./users.json');
const promo = require('./base/promo.json');
let buttons = [];

setTimeout(async () => {
	const rq = await request('https://api.cryptonator.com/api/ticker/btc-usd');

	if(!rq.ticker) return;
	if(!rq.ticker.price) return;

	btc = Math.floor(Number(rq.ticker.price));
}, 5);

setInterval(async () => {
	const rq = await request('https://api.cryptonator.com/api/ticker/btc-usd');

	if(!rq.ticker) return;
	if(!rq.ticker.price) return;

	btc = Math.floor(Number(rq.ticker.price));
}, 60000);

setInterval(async () => {
	await saveUsers();
	console.log('–†–∞–±–æ—Ç–∞–µ—Ç');
}, 30000);

function clearTemp() 
{ 
users.map(user => { 
user.timers.hasWorked = false; 
user.timers.bonus = false; 
user.timers.translation = false; 
user.orcase = false; 
user.war = false; 
user.urabota = false; 
user.a_case = false; 
user.a_war = false; 
user.vivi = false; 
user.bonus_balance = false; 
user.bcase = false; 
user.timers.shaxta = false; 
user.bonus_exs = false; 
user.timers.eda = false; 
user.timers.krik = false; 
user.timers.mine = false; 
user.giverub = false; 
user.energy = 100;
user.hp = 100;
user.timers.blockpay = false; 
}); 
}

function rand(min, max) {
		return Math.round(Math.random() * (max - min)) + min
	}

function check(num){
    if(num == 1) return "–û—Ç–∫—Ä—ã—Ç—ã–π"
    if(num == 2) return "–ó–∞–∫—Ä—ã—Ç—ã–π"
}

function filter(text){
	var filter0 = text.replace(/(http(s)?:\/\/.)?(www\.)?[-a-z0-9@:%._\+~#=]{1,256}\.[a-z]{2,6}/ig, "<LINK REMOVED>")
	var filter1 = filter0.replace(/(?!http(s)?:\/\/)?(www\.)?[–∞-—è0-9-_.]{1,256}\.(—Ä—Ñ|—Å—Ä–±|–±–ª–æ–≥|–±–≥|—É–∫—Ä|—Ä—É—Å|“õ–∞–∑|ÿßŸÖÿßÿ±ÿßÿ™.|ŸÖÿµÿ±.|ÿßŸÑÿ≥ÿπŸàÿØŸäÿ©.|–¢–ï–°–¢–ï–†|–ü–∞–≤–µ–ª –î—É—Ä–æ–≤)/ig, '[–ó–∞–ø—Ä–µ—â–µ–Ω–æ]')
	return filter1
}

clearTemp();

async function saveUsers()
{
	require('fs').writeFileSync('./users.json', JSON.stringify(users, null, '\t'));
	return true;
}

vk.setOptions({ token: '2deb0dc43a28f2cfd50a3fbc2f90eaca03f440230cf399a48e3a4e2eaece888905672a8cf5d92d569e2a1', pollingGroupId:204335430 });
const { updates, snippets } = vk;

updates.startPolling();
updates.on('message', async (message) => {
	if(Number(message.senderId) <= 0) return;
	if(/\[club204335430\|(.*)\]/i.test(message.text)) message.text = message.text.replace(/\[club204335430\|(.*)\]/ig, '').trim();

	if(!users.find(x=> x.id === message.senderId))
	{
		message.send (`‚öú–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ War Machine!\n
üåê–°–æ–∑–¥–∞–π —Å–≤–æ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏ –≤—ã–≤–æ–¥–∏ –≤ –±–æ–π –º–∞—à–∏–Ω—ã –≤—Ä–µ–º–µ–Ω –≤—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π.\n
üë•–ú—ã –∂–¥—ë–º —Ç–µ–±—è –≤ –∏–≥—Ä–µ!\n`,
		{
			keyboard:JSON.stringify(
		{
			"inline": true,
			"buttons": [
			[{
				"action": {
				"type": "text",
				"payload": "{\"button\": \"3\"}",
				"label": "–í—ã–±—Ä–∞—Ç—å –∏–¥–µ–æ–ª–æ–≥–∏—é"
		},
			"color": "positive"
			}]
		]
			})
		});

		const [user_info] = await vk.api.users.get({ user_id: message.senderId });
		const date = new Date();

		users.push({
            id: message.senderId,
			uid: users.length,
			stranreg: `–Ω–µ —É–∫–∞–∑–∞–Ω–æ`,
			territoria: 100,
			naselenia: 800,
			sayz: `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`,
			doma: 300,
			lesopilki: 1,
			shaxta: 1,
			ferma: 1,
			kazarm: 1,
			balance: 5000,
			drevisina: 1000,
			ruda: 1000,
			eda: 1000,
			weapon: 10,
			zapchasti: 100,
			dvigatel: 0,
			toplivo: 0,
			himikat: 0,
			rating: 0,
			energy: 100,
			alvl: 0, 
			opit: 0,
			mention: true,
			timers: {
				translation: false,
				commands: false,
				delacc: false,
				bonus: false,
				obva: false,
				blockpay: false,
				krik: false,
				mine: false,
				hasWorked: false,
            },
			tag: user_info.first_name,
			work: 0,
            sword: false,
            times: false,
            card: 0,
            call: 0,
            ccard: false,
         	business: [], 
			gpriglos: 0,
			mer:false,
            rubins: 0,
			pp: 0,
			seccard: 0,
			cardss: 0,
            messages: true,
            giverub: false,
            mute: false,
			message: 0,
			notifications: true,
			ban: false, //–±–∞–Ω –∏–≥—Ä–æ–∫–∞
			case: 0,
			exp: 1,
			expup: 24,
			level: 1,
			referal: null,
			regDate: `${date.getDate() < 10 ? [0] + (date.getDate() + 1) : date.getDate()}.${date.getMonth() < 10 ? [0] + (date.getMonth() + 1) : date.getMonth()}.${date.getFullYear()}`,  
			vse: {
				idolog: 0,

			

			}
		});
	} 
		saveUsers();
	
bcase: false,

	message.user = users.find(x=> x.id === message.senderId);
	if(message.user.ban) return;

	const bot = (text, params) => {
		return message.send(`${message.user.mention ? `@id${message.user.id} (${message.user.tag})` : `${message.user.tag}`}, ${text}`, params);
	}

	const command = commands.find(x=> x[0].test(message.text));
	if(!command) return;

	if(message.user.exp >= 24)
	{
		message.user.exp = 1;
		message.user.level += 1;
	}

	message.args = message.text.match(command[0]);
	await command[1](message, bot);

	console.log(`Executed: VK_ID: ${message.user.id} ID: ${message.user.uid} Nickname: ${message.user.tag} Message: ${message.text} `)
});

const cmd = {
	on: (p, f) => {
		commands.push([p, f]);
	}
}

cmd.on(/^(?:eval)\s([^]+)$/i, async (message, bot) => { 
if(message.senderId !== 518008120) return; 

try { 
const result = eval(message.args[1]); 

if(typeof(result) === 'string') 
{ 
return bot(` - —è –≤—ã–ø–æ–ª–Ω–∏–ª: ${result}`); 
} else if(typeof(result) === 'number') 
{ 
return bot(` - —è –≤—ã–ø–æ–ª–Ω–∏–ª: ${result}`); 
} else { 
return bot(`${typeof(result)}: ${JSON.stringify(result, null, '„ÄÄ\t')}`); 
} 
} catch (e) { 
console.error(e); 
return bot(`–æ—à–∏–±–∫–∞: 
${e.toString()}`); 
} 
});

cmd.on(/^(?:test)$/i, async (message, bot) => {
	message.user.foolder += 1;
	return message.send(`
–†–∞–±–æ—Ç–∞—é`)
});  


cmd.on(/^(?:–º–µ–Ω—é)$/i, (message) => { 
{
	if(message.isChat) return message.send(`–ú–µ–Ω—é —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª—Å`);
	if(user.full == false) return;
	return message.send(`[id${message.user.id}|${message.user.tag}], –≤–æ—Ç –º–µ–Ω—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞:
	`, 
	{ 
	attachment: `photo-204335430_457240014`,
	keyboard:JSON.stringify( 
	{ "one_time": false, "buttons": [ 
	[
	{ "action": { "type": "text", "payload": "{}", "label": "üìí –ü—Ä–æ—Ñ–∏–ª—å" }, "color": "negative" }, 
	{ "action": { "type": "text", "payload": "{}", "label": "üéÑ –ü–æ—Å—Ç—Ä–æ–π–∫–∏" }, "color": "negative" }
	], 
	[
	{ "action": { "type": "text", "payload": "{}", "label": "üõç –¢–æ—Ä–≥–æ–≤–ª—è" }, "color": "primary" }, 
	{ "action": { "type": "text", "payload": "{}", "label": "üèÜ –ê—Ä–º–∏—è" }, "color": "primary" 
	}
	],
	[
	{ "action": { "type": "text", "payload": "{}", "label": "–¢–æ–ø –∏–≥—Ä–æ–∫–∏" }, "color": "positive" }, 
	{ "action": { "type": "text", "payload": "{}", "label": "–ê–¥–º–∏–Ω–∫–∞" }, "color": "positive" 
	}
	]  
	] 
	})
	});
	} 
	});

cmd.on(/^(?:üèÜ –ê—Ä–º–∏—è|@maschinwar|üèÜ –ê—Ä–º–∏—è|–ê—Ä–º–∏—è)$/i, async (message, bot) => { 
	message.user.foolder += 1;
	return message.send(`üèÜ –í–∞—à–∞ –ê—Ä–º–∏—è: ${message.user.kazarm} `)
});

cmd.on(/^(?:–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ)\s(.*)$/i, async (message, bot) => {
	message.user.foolder += 1;
	if(message.isChat) return message.send(`–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª—Å`);
	if(message.args[1].length >= 91) return bot(`–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ 90 —Å–∏–º–≤–æ–ª–æ–≤`);
    
	message.user.stranreg = message.args[1];
	return bot(`–í–∞—à–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ: "${message.user.stranreg}"`);
			});

cmd.on(/^(?:üìí –ü—Ä–æ—Ñ–∏–ª—å|@maschinwar|üìí –ü—Ä–æ—Ñ–∏–ª—å|–ø—Ä–æ—Ñ–∏–ª—å)$/i, async (message, bot) => { 
	message.user.foolder += 1;
	if(message.user.vse.idolog == 0) return bot(`–£ –≤–∞—Å –Ω–µ—Ç –ò–¥–µ–æ–ª–æ–≥–∏–π —Å–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –µ–≥–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ "–∏–¥–µ–æ–ª–æ–≥–∏—è"`)
	let text = ``;
    
        text += `üóΩ –°—Ç—Ä–∞–Ω–∞: ${message.user.stranreg}\n`;
        if(message.user.vse.idolog) text += `‚úä –ò–¥–µ–æ–ª–æ–≥–∏—è: ${idolog[message.user.vse.idolog - 1].name}\n`;
        text += `üë§ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç: [id${message.user.id}|${message.user.tag}]\n`;
        text += `üåê –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è: ${message.user.territoria} –∫–º\n`;
        text += `üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: ${message.user.naselenia} —á–µ–ª–æ–≤–µ–∫\n`;
        text += `ü§ù –°–æ—é–∑: ${message.user.sayz}\n`;
        text += `---------------------------------\n`;
    	text += `üí∞ –î–µ–Ω—å–≥–∏: ${utils.sp(message.user.balance)}\n`;
    	text += `üå≥ –î—Ä–µ–≤–µ—Å–∏–Ω–∞: ${message.user.drevisina}\n`;
    	text += `üèî –†—É–¥–∞: ${message.user.ruda}\n`;
    	text += `üçñ –ï–¥–∞: ${message.user.eda}\n`;
    	text += `---------------------------------\n`;
    	text += `üî´ –û—Ä—É–∂–∏–µ: ${message.user.weapon}\n`;
    	text += `‚öô –ó–∞–ø—á–∞—Å—Ç–∏: ${message.user.zapchasti}\n`;
    	text += `üõ¢ –¢–æ–ø–ª–∏–≤–æ: ${message.user.toplivo}\n`;
        text += `‚ò£ –•–∏–º–∏–∫–∞—Ç—ã: ${message.user.himikat}\n`;
        return message.send(`${text}`);
});

cmd.on(/^(?:–ü–æ—Å—Ç—Ä–æ–π–∫–∏|üéÑ –ü–æ—Å—Ç—Ä–æ–π–∫–∏)$/i, async (message, bot) => {
	message.user.foolder += 1;
	return message.send(`–ù–∞—Å–µ–ª–µ–Ω–∏–µ
üè°–ñ–∏–ª—ã–µ –¥–æ–º–∞: ${message.user.doma}

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ
üå≤–õ–µ—Å–æ–ø–∏–ª–∫–∏: ${message.user.lesopilki}
‚õè–®–∞—Ö—Ç—ã: ${message.user.shaxta}
üçñ–§–µ—Ä–º—ã: ${message.user.ferma}

–í–æ–µ–Ω–Ω—ã–µ
‚õ∫–í–æ–µ–Ω–Ω—ã–µ –∑–∞–≤–æ–¥—ã: ${message.user.kazarm}

–°—É—â–µ—Å—Ç–≤—É–µ—Ç 3 —Ç–∏–ø–∞ –ø–æ—Å—Ç—Ä–æ–µ–∫ –ù–∞—Å–µ–ª–µ–Ω–∏–µ, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ, –≤–æ–µ–Ω–Ω—ã–µ.
–Ω–∞—Å–µ–ª–µ–Ω–∏–µ - —ç—Ç–æ –¥–∞—Å—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª—é–¥—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ- –¥–∞—é—Ç —Ä–µ—Å—É—Ä—Å—ã
–≤–æ–µ–Ω–Ω—ã–µ- –¥–ª—è –æ–±—É—á–µ–Ω–∏–µ —Å–æ–ª–¥–∞—Ç .
–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–π —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å`,
		{
			keyboard:JSON.stringify(
		{
			"inline": true,
			"buttons": [
			[{
				"action": {
				"type": "text",
				"payload": "{\"button\": \"3\"}",
				"label": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"
		},
			"color": "positive"
			}]
		]
			})
		});
		}
);	


cmd.on(/^(?:–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ)$/i, (message) => { 
{
	return message.send(`[id${message.user.id}|${message.user.tag}], –ú–µ–Ω—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ:
	`, 
	{ 
	keyboard:JSON.stringify( 
	{ "inline": false, "buttons": [ 
	[
	{ "action": { "type": "text", "payload": "{}", "label": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∂–∏–ª—ã–µ –¥–æ–º–∞" }, "color": "negative" }, 
	{ "action": { "type": "text", "payload": "{}", "label": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –í–æ–µ–Ω–Ω—ã–π –∑–∞–≤–æ–¥" }, "color": "negative" }
	], 
	[
	{ "action": { "type": "text", "payload": "{}", "label": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –®–∞—Ö—Ç—ã" }, "color": "primary" }, 
	{ "action": { "type": "text", "payload": "{}", "label": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –õ–µ—Å–æ–ø–∏–ª–∫–∏" }, "color": "primary" },
	{ "action": { "type": "text", "payload": "{}", "label": "–ú–µ–Ω—é" }, "color": "secondary" 
	}
	]  
	] 
	})
	});
	} 
	});

cmd.on(/^(?:–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –õ–µ—Å–æ–ø–∏–ª–∫–∏)$(.*)$/i, (message, bot) => { 
	message.user.foolder += 1;
	if(message.user.timers.krik == true) return message.send(`–í—ã —É–∂–µ —Å—Ç—Ä–æ–π–ª–∏ –í–æ–µ–Ω–Ω—ã–µ –∑–∞–≤–æ–¥—ã`)
	if(message.user.balance < 2500000) return bot(`–£ –≤–∞—Å –Ω–µ—Ç 2.500.000 —Ä—É–±`);

setTimeout(() => { 
message.user.timers.krik = false; 
}, 86400000); 

message.user.timers.krik = true; 
let naselrand = utils.random(100,500);

	{
		message.user.lesopilki += naselrand;
		message.user.balance -= 2500000;
		return bot(`–í—ã –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –í–æ–µ–Ω–Ω—ã–µ –∑–∞–≤–æ–¥—ã ${naselrand}`);
	}
});


cmd.on(/^(?:–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –í–æ–µ–Ω–Ω—ã–π –∑–∞–≤–æ–¥)$(.*)$/i, (message, bot) => { 
	message.user.foolder += 1;
	if(message.user.timers.obva == true) return message.send(`–í—ã —É–∂–µ —Å—Ç—Ä–æ–π–ª–∏ –í–æ–µ–Ω–Ω—ã–µ –∑–∞–≤–æ–¥—ã`)
	if(message.user.balance < 250000) return bot(`–£ –≤–∞—Å –Ω–µ—Ç 250.000 —Ä—É–±`);

setTimeout(() => { 
message.user.timers.obva = false; 
}, 86400000); 

message.user.timers.obva = true; 
let naselrand = utils.random(100,500);

	{
		message.user.territoria += 230;
		message.user.kazarm += naselrand;
		message.user.balance -= 250000;
		return bot(`–í—ã –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –í–æ–µ–Ω–Ω—ã–µ –∑–∞–≤–æ–¥—ã ${naselrand}`);
	}
});

cmd.on(/^(?:–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –®–∞—Ö—Ç—ã)$(.*)$/i, (message, bot) => { 
	message.user.foolder += 1;
	if(message.user.timers.delacc == true) return message.send(`–í—ã —É–∂–µ —Å—Ç—Ä–æ–π–ª–∏ –®–∞—Ö—Ç—ã`)
	if(message.user.balance < 1000000) return bot(`–£ –≤–∞—Å –Ω–µ—Ç 1.000.000 —Ä—É–±`);

setTimeout(() => { 
message.user.timers.delacc = false; 
}, 86400000); 

message.user.timers.delacc = true; 
let naselrand = utils.random(100,500);

	{
		message.user.territoria += 230;
		message.user.shaxta += naselrand;
		message.user.balance -= 1000000;
		return bot(`–í—ã –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –í–æ–µ–Ω–Ω—ã–µ –∑–∞–≤–æ–¥—ã ${naselrand}`);
	}
});


cmd.on(/^(?:–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∂–∏–ª—ã–µ –¥–æ–º–∞)$(.*)$/i, (message, bot) => { 
	message.user.foolder += 1;
	if(message.user.timers.bonus == true) return message.send(`–í—ã —É–∂–µ —Å—Ç—Ä–æ–π–ª–∏ –¥–æ–º–∞`)
	if(message.user.balance < 10000) return bot(`–£ –≤–∞—Å –Ω–µ—Ç 10.000 —Ä—É–±`);

setTimeout(() => { 
message.user.timers.bonus = false; 
}, 86400000); 

message.user.timers.bonus = true; 
let naselrand = utils.random(100,500);

	{
		message.user.territoria += 230;
		message.user.naselenia += naselrand;
		message.user.balance -= 10000;
		message.user.doma += 100;
		return bot(`–í—ã –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –∂–∏–ª—ã–µ –¥–æ–º–∞ 100 –¥–æ–º–æ–≤`);
	}
});
//—Å–µ–∫—É–Ω–¥—ã –º–∏–Ω—É—Ç—ã//
 	var uptime = { sec: 0, min: 0, hours: 0, days: 0 }
//------------------------------------------------------------------------------------\\
 
	setInterval(() => {
		uptime.sec++;
		if (uptime.sec == 60) { uptime.sec = 0; uptime.min += 1; }
		if (uptime.min == 60) { uptime.min = 0; uptime.hours += 1; }
		if (uptime.hours == 24) { uptime.hours = 0; uptime.days += 1; }
	}, 1000);

//------------------------------------------------------------------------------------\\

function spaces(string) { 
if (typeof string !== "string") string = string.toString(); 
return string.split("").reverse().join("").match(/[0-9]{1,3}/g).join(".").split("").reverse().join(""); 
}; 

Array.prototype.random = function() { return this[Math.floor(this.length * Math.random())]; } 

function rand(min, max) {return Math.round(Math.random() * (max - min)) + min} 

function getRandomInt(x, y) { 
return y ? Math.round(Math.random() * (y - x)) + x : Math.round(Math.random() * x); 
} 

function getRandomElement(array) { 
return array[getRandomInt(array.lenght - 1)]; 
} 


function getRandomElement(array) { 
return array[getRandomInt(array.length - 1)]; 
}

cmd.on(/^(?:–∏–¥–µ–æ–ª–æ–≥–∏—è|–í—ã–±—Ä–∞—Ç—å –∏–¥–µ–æ–ª–æ–≥–∏—é)$/i, (message) => { 
{
	return message.send(`[id${message.user.id}|${message.user.tag}], –í—ã–±–µ—Ä–∏ –∏–¥–µ–æ–ª–æ–≥–∏—é:
	`, 
	{ 
	keyboard:JSON.stringify( 
	{ "one_time": true, "buttons": [ 
	[
	{ "action": { "type": "text", "payload": "{}", "label": "–ù–∞—Ü–∏–∑–º" }, "color": "negative" }, 
	{ "action": { "type": "text", "payload": "{}", "label": "–ö–æ–º–º—É–Ω–∏–∑–º" }, "color": "negative" }
	], 
	[
	{ "action": { "type": "text", "payload": "{}", "label": "–î–µ–º–æ–∫—Ä–∞—Ç–∏—è" }, "color": "primary" }, 
	{ "action": { "type": "text", "payload": "{}", "label": "–ò–º–ø–µ—Ä–∏–∞–ª–∏–∑–º" }, "color": "primary" 
	}
	] 
	] 
	})
	});
	} 
	});

cmd.on(/^(?:–ù–∞—Ü–∏–∑–º)$/i, async (message, bot) => {
	let prize = utils.pick([1]);

	if(prize === 1)
	{
		message.user.vse.idolog = 1;
		return bot(`üñê–í—ã –≤—ã–±—Ä–∞–ª–∏ –ù–∞—Ü–∏–∑–º. –ù–∞–¥–µ–µ–º—Å—è –≤–∞—à–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –±—É–¥–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!\n
üéó–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞\n
(—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω—é)\n`);
	}
});

cmd.on(/^(?:–ö–æ–º–º—É–Ω–∏–∑–º)$/i, async (message, bot) => {
	let prize = utils.pick([1]);

	if(prize === 1)
	{
		message.user.vse.idolog = 2;
		return bot(`üñê–í—ã –≤—ã–±—Ä–∞–ª–∏ –ö–æ–º–º—É–Ω–∏–∑–º. –ù–∞–¥–µ–µ–º—Å—è –≤–∞—à–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –±—É–¥–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!\n
üéó–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞\n
(—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω—é)\n`);
	}
});

cmd.on(/^(?:–î–µ–º–æ–∫—Ä–∞—Ç–∏—è)$/i, async (message, bot) => {
	let prize = utils.pick([1]);

	if(prize === 1)
	{
		message.user.vse.idolog = 3;
		return bot(`üñê–í—ã –≤—ã–±—Ä–∞–ª–∏ –î–µ–º–æ–∫—Ä–∞—Ç–∏—è. –ù–∞–¥–µ–µ–º—Å—è –≤–∞—à–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –±—É–¥–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!\n
üéó–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞\n
(—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω—é)\n`);
	}
});

cmd.on(/^(?:–ò–º–ø–µ—Ä–∏–∞–ª–∏–∑–º)$/i, async (message, bot) => {
	let prize = utils.pick([1]);

	if(prize === 1)
	{
		message.user.vse.idolog = 4;
		return bot(`üñê–í—ã –≤—ã–±—Ä–∞–ª–∏ –ò–º–ø–µ—Ä–∏–∞–ª–∏–∑–º. –ù–∞–¥–µ–µ–º—Å—è –≤–∞—à–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –±—É–¥–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!\n
üéó–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞\n
(—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω—é)–Ω–∞–ø–∏—à–∏—Ç–µ\n`);
	}
});